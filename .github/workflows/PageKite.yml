name: Windows Remote Server via PageKite
on: 
  workflow_dispatch:

jobs:
  remote-access:
    runs-on: windows-latest
    timeout-minutes: 360
    steps:
    - name: Setup Remote Access
      run: |
        # Basic setup
        $ErrorActionPreference = "Stop"
        
        # 1. Create or update user
        $username = "remoteadmin"
        $password = "SecurePass123!"
        $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
        
        try {
            New-LocalUser -Name $username -Password $securePassword -ErrorAction SilentlyContinue
            Add-LocalGroupMember -Group "Administrators" -Member $username
            Write-Host "User created successfully"
        } catch {
            Set-LocalUser -Name $username -Password $securePassword
            Write-Host "User password updated"
        }

        # 2. Enable RDP
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        Write-Host "RDP enabled"

        # 3. Setup PageKite
        Invoke-WebRequest -Uri "https://pagekite.net/pk/pagekite.py" -OutFile "pagekite.py"
        
        # Correct variable handling for PowerShell
        $kite_name = "${{ secrets.PAGEKITE_USERNAME }}-rdp.pagekite.me"
        $kite_secret = "${{ secrets.PAGEKITE_SECRET }}"
        
        # Build the connection string separately
        $connection_string = "${kite_name}:${kite_secret}"
        
        Write-Host "Starting PageKite with connection: $connection_string"
        
        # Start PageKite with proper argument formatting
        Start-Process python -ArgumentList @(
            "pagekite.py",
            "--clean",
            "--frontend=pagekite.net",
            "3389",
            $connection_string
        ) -NoNewWindow
        
        # 4. Show connection details
        Write-Host "`n=== CONNECTION DETAILS ==="
        Write-Host "RDP Address: $kite_name"
        Write-Host "Username: $username"
        Write-Host "Password: $password"
        Write-Host "=========================`n"
        
        # 5. Keep alive for 6 hours
        Write-Host "Server will remain active for 6 hours..."
        Start-Sleep -Seconds 21600
      shell: powershell
