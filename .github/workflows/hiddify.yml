name: Hiddify Windows Setup with RDP Access

on:
  workflow_dispatch:

jobs:
  setup:
    runs-on: windows-latest

    steps:
    # مرحله 1: تنظیمات RDP و ngrok برای دسترسی به محیط ویندوز
    - name: Download ngrok
      run: |
        Invoke-WebRequest https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip -OutFile ngrok.zip
        
    - name: Extract ngrok
      run: |
        Expand-Archive ngrok.zip -DestinationPath ngrok
        
    - name: Authenticate ngrok
      run: .\ngrok\ngrok.exe authtoken $Env:NGROK_AUTH_TOKEN
      env:
        NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
        
    - name: Enable Remote Desktop
      run: |
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 1
        
    - name: Set password for runneradmin
      run: |
        $password = ConvertTo-SecureString -String "Shahid@123" -AsPlainText -Force
        Set-LocalUser -Name "runneradmin" -Password $password
        
    - name: Create ngrok tunnel
      run: Start-Process -NoNewWindow -FilePath ".\ngrok\ngrok.exe" -ArgumentList "tcp 3389"
      
    # مرحله 2: تنظیم و اجرای Hiddify
    - name: Download Hiddify Portable
      run: |
        $url = "https://github.com/hiddify/hiddify-app/releases/download/v2.0.5/Hiddify-Windows-Portable-x64.zip"
        $output = "Hiddify-Windows-Portable-x64.zip"
        Invoke-WebRequest -Uri $url -OutFile $output
        
    - name: Extract Hiddify Files
      run: |
        Expand-Archive -Path "Hiddify-Windows-Portable-x64.zip" -DestinationPath .
        
    - name: Set clipboard content
      run: |
        $configUrl = "https://raw.githubusercontent.com/e-schamberger/free/refs/heads/main/config/vless.json"
        Set-Clipboard -Value $configUrl
        
    - name: Create automation script
      run: |
        @'
        Add-Type -AssemblyName System.Windows.Forms
        Add-Type -AssemblyName Microsoft.VisualBasic

        # Start Hiddify
        $process = Start-Process "Hiddify.exe" -PassThru
        Start-Sleep -Seconds 30

        # Click 'Start' button
        [Microsoft.VisualBasic.Interaction]::AppActivate($process.Id)
        Start-Sleep -Seconds 5
        [System.Windows.Forms.SendKeys]::SendWait("{TAB 5}")
        [System.Windows.Forms.SendKeys]::SendWait("{ENTER}")
        Start-Sleep -Seconds 15

        # Click '+' button
        [System.Windows.Forms.SendKeys]::SendWait("%{TAB}")
        Start-Sleep -Seconds 2
        [System.Windows.Forms.SendKeys]::SendWait("{TAB 10}")
        [System.Windows.Forms.SendKeys]::SendWait("{ENTER}")
        Start-Sleep -Seconds 10

        # Select 'Add from clipboard'
        [System.Windows.Forms.SendKeys]::SendWait("{DOWN 4}")
        [System.Windows.Forms.SendKeys]::SendWait("{ENTER}")
        Start-Sleep -Seconds 60  # Wait for download

        # Close application
        $process | Stop-Process -Force
        '@ | Out-File -FilePath "automation.ps1" -Encoding UTF8
        
    - name: Run Hiddify with automation
      run: |
        powershell -ExecutionPolicy Bypass -File "automation.ps1"
        
    - name: Show hidden files
      run: |
        # فعال‌سازی نمایش فایل‌های مخفی
        reg add "HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v Hidden /t REG_DWORD /d 1 /f
        reg add "HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v ShowSuperHidden /t REG_DWORD /d 1 /f
        Stop-Process -Name explorer -Force -ErrorAction SilentlyContinue
        
    - name: Find config file
      run: |
        # جستجو در مسیرهای اصلی
        $searchPaths = @(
            "$env:APPDATA\Hiddify\hiddify\configs",
            "$env:LOCALAPPDATA\Hiddify\hiddify\configs",
            "C:\ProgramData\Hiddify\hiddify\configs",
            "C:\Hiddify\configs"
        )
        
        $configFile = $null
        foreach ($path in $searchPaths) {
            Write-Host "Checking path: $path"
            try {
                $dir = Get-Item -Path $path -Force -ErrorAction Stop
                $files = Get-ChildItem -Path $path -Filter *.json -Force
                if ($files) {
                    $configFile = $files[0].FullName
                    Write-Host "Found config file at: $configFile"
                    break
                }
            } catch {
                Write-Host "Path not found: $path"
            }
        }
        
        # جستجوی عمیق‌تر در صورت نیاز
        if (-not $configFile) {
            Write-Host "Performing deep search..."
            $configFile = Get-ChildItem -Path "C:\" -Filter *.json -Recurse -Force -ErrorAction SilentlyContinue | 
                          Where-Object { $_.FullName -match "Hiddify[\\/]hiddify[\\/]configs" } |
                          Select-Object -First 1 -ExpandProperty FullName
        }
        
        if ($configFile) {
            Write-Host "Config file found: $configFile"
            $env:CONFIG_FILE_PATH = $configFile
            Add-Content -Path $env:GITHUB_ENV -Value "CONFIG_FILE_PATH=$configFile"
        } else {
            Write-Error "Config file not found!"
            Get-ChildItem -Path "C:\" -Filter "Hiddify" -Recurse -Directory -Force -ErrorAction SilentlyContinue | 
                Select-Object FullName
            exit 1
        }
        
    - name: Save config file
      run: |
        $sourcePath = $env:CONFIG_FILE_PATH
        $destDir = "hiddify-config"
        New-Item -ItemType Directory -Path $destDir -Force
        Copy-Item -Path $sourcePath -Destination "$destDir/config.json" -Force
        Write-Host "Config file copied successfully"
        
    - name: Upload config to GitHub
      uses: actions/upload-artifact@v4
      with:
        name: hiddify-config
        path: hiddify-config/
